/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

// Remove Widgets in CodeMirror Editor
const clearWidgets = (cm) => {
    var lastLine = cm.lastLine();
    for (let i = 0; i <= lastLine; i++) {
        const line = cm.lineInfo(i);
        clearLineWidgets(line);
    }
};
// Clear Single Line Widget
const clearLineWidgets = (line) => {
    if (line.widgets) {
        for (const wid of line.widgets) {
            if (wid.className === 'oz-image-widget') {
                wid.clear();
            }
        }
    }
};
// Check line if it is a link
const get_link_in_line = (line) => {
    const image_http_regex_3 = /!\[\[[a-z][a-z0-9+\-.]+:\/.*\]\]/;
    const image_http_regex_4 = /!\[(^$|.*)\]\([a-z][a-z0-9+\-.]+:\/.*\)/;
    const match_3 = line.match(image_http_regex_3);
    const match_4 = line.match(image_http_regex_4);
    if (match_3) {
        return { result: match_3, linkType: 3 };
    }
    else if (match_4) {
        return { result: match_4, linkType: 4 };
    }
    return { result: false, linkType: 0 };
};
// Check line if it is image
const get_image_in_line = (line) => {
    // Regex for [[ ]] format
    const image_line_regex_1 = /!\[\[.*(jpe?g|png|gif|svg|bmp).*\]\]/;
    // Regex for ![ ]( ) format
    const image_line_regex_2 = /!\[(^$|.*)\]\(.*(jpe?g|png|gif|svg|bmp)\)/;
    const match_1 = line.match(image_line_regex_1);
    const match_2 = line.match(image_line_regex_2);
    if (match_1) {
        return { result: match_1, linkType: 1 };
    }
    else if (match_2) {
        return { result: match_2, linkType: 2 };
    }
    return { result: false, linkType: 0 };
};
// Image Name and Alt Text
const getFileNameAndAltText = (linkType, match) => {
    /*
       linkType 1: ![[myimage.jpg|#x-small]], linkType 2: ![#x-small](myimage.jpg)
       linkType 3: ![[https://image|#x-small]], linkType 4: ![#x-small](https://image)
       returns { fileName: '', altText: '' }
    */
    var file_name_regex;
    var alt_regex;
    if (linkType == 1 || linkType == 3) {
        if (linkType == 1)
            file_name_regex = /(?<=\[\[).*(jpe?g|png|gif|svg|bmp)/;
        if (linkType == 3)
            file_name_regex = /(?<=\[\[).*(?=\|)|(?<=\[\[).*(?=\]\])/;
        alt_regex = /(?<=\|).*(?=]])/;
    }
    else if (linkType == 2 || linkType == 4) {
        if (linkType == 2)
            file_name_regex = /(?<=\().*(jpe?g|png|gif|svg|bmp)/;
        if (linkType == 4)
            file_name_regex = /(?<=\().*(?=\))/;
        alt_regex = /(?<=\[)(^$|.*)(?=\])/;
    }
    var file_match = match[0].match(file_name_regex);
    var alt_match = match[0].match(alt_regex);
    return { fileName: file_match ? file_match[0] : '',
        altText: alt_match ? alt_match[0] : '' };
};
// Getting Active Markdown File
const getActiveNoteFile = (workspace) => {
    return workspace.getActiveFile();
};
const getPathOfVault = (vault) => {
    var path = vault.adapter.basePath;
    if (path.startsWith('/'))
        return 'app://local' + path;
    return 'app://local/' + path;
};
// Temporary Solution until getResourcePath improved 
const getPathOfImage = (vault, image) => {
    // vault.getResourcePath(image) 
    return getPathOfVault(vault) + '/' + image.path + '?' + image.stat.mtime;
};
const getFileCmBelongsTo = (cm, workspace) => {
    var _a;
    let leafs = workspace.getLeavesOfType("markdown");
    for (let i = 0; i < leafs.length; i++) {
        if (leafs[i].view instanceof obsidian.MarkdownView && ((_a = leafs[i].view.sourceMode) === null || _a === void 0 ? void 0 : _a.cmEditor) == cm) {
            return leafs[i].view.file;
        }
    }
    return null;
};

// Check Single Line
const check_line = (cm, line_number, targetFile, app) => {
    // Get the Line edited
    const line = cm.lineInfo(line_number);
    if (line === null)
        return;
    // Check if the line is an internet link
    const link_in_line = get_link_in_line(line.text);
    const img_in_line = get_image_in_line(line.text);
    // Clear the widget if link was removed
    var line_image_widget = line.widgets ? line.widgets.filter((wid) => wid.className === 'oz-image-widget') : false;
    if (line_image_widget && !(img_in_line.result || link_in_line.result))
        line_image_widget[0].clear();
    // If any of regex matches, it will add image widget
    if (link_in_line.result || img_in_line.result) {
        // Clear the image widgets if exists
        clearLineWidgets(line);
        // Get the file name and alt text depending on format
        var filename = '';
        var alt = '';
        if (link_in_line.result) {
            // linkType 3 and 4
            filename = getFileNameAndAltText(link_in_line.linkType, link_in_line.result).fileName;
            alt = getFileNameAndAltText(link_in_line.linkType, link_in_line.result).altText;
        }
        else if (img_in_line.result) {
            filename = getFileNameAndAltText(img_in_line.linkType, img_in_line.result).fileName;
            alt = getFileNameAndAltText(img_in_line.linkType, img_in_line.result).altText;
        }
        // Create Image
        const img = document.createElement('img');
        // Prepare the src for the Image
        if (link_in_line.result) {
            img.src = filename;
        }
        else {
            // Source Path
            var sourcePath = '';
            if (targetFile != null) {
                sourcePath = targetFile.path;
            }
            else {
                let activeNoteFile = getActiveNoteFile(app.workspace);
                sourcePath = activeNoteFile ? activeNoteFile.path : '';
            }
            var image = app.metadataCache.getFirstLinkpathDest(decodeURIComponent(filename), sourcePath);
            if (image != null)
                img.src = getPathOfImage(app.vault, image);
        }
        // Image Properties
        img.alt = alt;
        // Add Image widget under the Image Markdown
        cm.addLineWidget(line_number, img, { className: 'oz-image-widget' });
    }
};
// Check All Lines Function
const check_lines = (cm, from, to, app) => {
    // Last Used Line Number in Code Mirror
    var file = getFileCmBelongsTo(cm, app.workspace);
    for (let i = from; i <= to; i++) {
        check_line(cm, i, file, app);
    }
};

class OzanImagePlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        // Line Edit Changes
        this.codemirrorLineChanges = (cm, change) => {
            check_lines(cm, change.from.line, change.from.line + change.text.length - 1, this.app);
        };
        // Only Triggered during initial Load
        this.handleInitialLoad = (cm) => {
            var lastLine = cm.lastLine();
            var file = getFileCmBelongsTo(cm, this.app.workspace);
            for (let i = 0; i < lastLine; i++) {
                check_line(cm, i, file, this.app);
            }
        };
    }
    onload() {
        console.log('Image in Editor Plugin is loaded');
        // Register event for each change
        this.registerCodeMirror((cm) => {
            cm.on("change", this.codemirrorLineChanges);
            this.handleInitialLoad(cm);
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off("change", this.codemirrorLineChanges);
            clearWidgets(cm);
        });
        console.log('Image in Editor Plugin is unloaded');
    }
}

module.exports = OzanImagePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL3V0aWxzLnRzIiwic3JjL2NoZWNrLWxpbmUudHMiLCJzcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3Jrc3BhY2UsIE1hcmtkb3duVmlldywgVmF1bHQsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG4vLyBSZW1vdmUgV2lkZ2V0cyBpbiBDb2RlTWlycm9yIEVkaXRvclxuZXhwb3J0IGNvbnN0IGNsZWFyV2lkZ2V0cyA9IChjbTogQ29kZU1pcnJvci5FZGl0b3IpID0+IHtcbiAgICB2YXIgbGFzdExpbmUgPSBjbS5sYXN0TGluZSgpO1xuICAgIGZvcihsZXQgaT0wOyBpIDw9IGxhc3RMaW5lOyBpKyspe1xuICAgICAgICBjb25zdCBsaW5lID0gY20ubGluZUluZm8oaSk7XG4gICAgICAgIGNsZWFyTGluZVdpZGdldHMobGluZSk7XG4gICAgfVxufVxuXG4vLyBDbGVhciBTaW5nbGUgTGluZSBXaWRnZXRcbmV4cG9ydCBjb25zdCBjbGVhckxpbmVXaWRnZXRzID0gKGxpbmU6IGFueSkgPT4ge1xuICAgIGlmKGxpbmUud2lkZ2V0cyl7XG4gICAgICAgIGZvcihjb25zdCB3aWQgb2YgbGluZS53aWRnZXRzKXtcbiAgICAgICAgICAgIGlmICh3aWQuY2xhc3NOYW1lID09PSAnb3otaW1hZ2Utd2lkZ2V0Jyl7XG4gICAgICAgICAgICAgICAgd2lkLmNsZWFyKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gQ2hlY2sgbGluZSBpZiBpdCBpcyBhIGxpbmtcbmV4cG9ydCBjb25zdCBnZXRfbGlua19pbl9saW5lID0gKGxpbmU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGltYWdlX2h0dHBfcmVnZXhfMyA9IC8hXFxbXFxbW2Etel1bYS16MC05K1xcLS5dKzpcXC8uKlxcXVxcXS9cbiAgICBjb25zdCBpbWFnZV9odHRwX3JlZ2V4XzQgPSAvIVxcWyheJHwuKilcXF1cXChbYS16XVthLXowLTkrXFwtLl0rOlxcLy4qXFwpL1xuICAgIGNvbnN0IG1hdGNoXzMgPSBsaW5lLm1hdGNoKGltYWdlX2h0dHBfcmVnZXhfMyk7XG4gICAgY29uc3QgbWF0Y2hfNCA9IGxpbmUubWF0Y2goaW1hZ2VfaHR0cF9yZWdleF80KTtcbiAgICBpZihtYXRjaF8zKXtcbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0OiBtYXRjaF8zLCBsaW5rVHlwZTogMyB9O1xuICAgIH0gZWxzZSBpZihtYXRjaF80KXtcbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0OiBtYXRjaF80LCBsaW5rVHlwZTogNCB9O1xuICAgIH1cbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCBsaW5rVHlwZTogMCB9O1xufVxuXG4vLyBDaGVjayBsaW5lIGlmIGl0IGlzIGltYWdlXG5leHBvcnQgY29uc3QgZ2V0X2ltYWdlX2luX2xpbmUgPSAobGluZTogc3RyaW5nKSA9PiB7XG4gICAgLy8gUmVnZXggZm9yIFtbIF1dIGZvcm1hdFxuICAgIGNvbnN0IGltYWdlX2xpbmVfcmVnZXhfMSA9IC8hXFxbXFxbLiooanBlP2d8cG5nfGdpZnxzdmd8Ym1wKS4qXFxdXFxdL1xuICAgIC8vIFJlZ2V4IGZvciAhWyBdKCApIGZvcm1hdFxuICAgIGNvbnN0IGltYWdlX2xpbmVfcmVnZXhfMiA9IC8hXFxbKF4kfC4qKVxcXVxcKC4qKGpwZT9nfHBuZ3xnaWZ8c3ZnfGJtcClcXCkvXG4gICAgY29uc3QgbWF0Y2hfMSA9IGxpbmUubWF0Y2goaW1hZ2VfbGluZV9yZWdleF8xKTtcbiAgICBjb25zdCBtYXRjaF8yID0gbGluZS5tYXRjaChpbWFnZV9saW5lX3JlZ2V4XzIpO1xuICAgIGlmKG1hdGNoXzEpe1xuICAgICAgICByZXR1cm4geyByZXN1bHQ6IG1hdGNoXzEsIGxpbmtUeXBlOiAxfVxuICAgIH1lbHNlIGlmKG1hdGNoXzIpe1xuICAgICAgICByZXR1cm4geyByZXN1bHQ6IG1hdGNoXzIsIGxpbmtUeXBlOiAyfVxuICAgIH1cbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCBsaW5rVHlwZTogMH1cbn1cblxuIC8vIEltYWdlIE5hbWUgYW5kIEFsdCBUZXh0XG5leHBvcnQgY29uc3QgZ2V0RmlsZU5hbWVBbmRBbHRUZXh0ID0gKGxpbmtUeXBlOiBudW1iZXIsIG1hdGNoOiBhbnkpID0+IHtcbiAgICAvKiBcbiAgICAgICBsaW5rVHlwZSAxOiAhW1tteWltYWdlLmpwZ3wjeC1zbWFsbF1dLCBsaW5rVHlwZSAyOiAhWyN4LXNtYWxsXShteWltYWdlLmpwZykgXG4gICAgICAgbGlua1R5cGUgMzogIVtbaHR0cHM6Ly9pbWFnZXwjeC1zbWFsbF1dLCBsaW5rVHlwZSA0OiAhWyN4LXNtYWxsXShodHRwczovL2ltYWdlKSBcbiAgICAgICByZXR1cm5zIHsgZmlsZU5hbWU6ICcnLCBhbHRUZXh0OiAnJyB9ICAgXG4gICAgKi9cbiAgICB2YXIgZmlsZV9uYW1lX3JlZ2V4O1xuICAgIHZhciBhbHRfcmVnZXg7XG5cbiAgICBpZihsaW5rVHlwZSA9PSAxIHx8IGxpbmtUeXBlID09IDMpe1xuICAgICAgICBpZihsaW5rVHlwZSA9PSAxKSBmaWxlX25hbWVfcmVnZXggPSAvKD88PVxcW1xcWykuKihqcGU/Z3xwbmd8Z2lmfHN2Z3xibXApLztcbiAgICAgICAgaWYobGlua1R5cGUgPT0gMykgZmlsZV9uYW1lX3JlZ2V4ID0gLyg/PD1cXFtcXFspLiooPz1cXHwpfCg/PD1cXFtcXFspLiooPz1cXF1cXF0pLztcbiAgICAgICAgYWx0X3JlZ2V4ID0gLyg/PD1cXHwpLiooPz1dXSkvO1xuICAgIH0gZWxzZSBpZihsaW5rVHlwZSA9PSAyIHx8IGxpbmtUeXBlID09IDQpe1xuICAgICAgICBpZihsaW5rVHlwZSA9PSAyKSBmaWxlX25hbWVfcmVnZXggPSAvKD88PVxcKCkuKihqcGU/Z3xwbmd8Z2lmfHN2Z3xibXApLztcbiAgICAgICAgaWYobGlua1R5cGUgPT0gNCkgZmlsZV9uYW1lX3JlZ2V4ID0gLyg/PD1cXCgpLiooPz1cXCkpLztcbiAgICAgICAgYWx0X3JlZ2V4ID0gLyg/PD1cXFspKF4kfC4qKSg/PVxcXSkvO1xuICAgIH1cblxuICAgIHZhciBmaWxlX21hdGNoID0gbWF0Y2hbMF0ubWF0Y2goZmlsZV9uYW1lX3JlZ2V4KTtcbiAgICB2YXIgYWx0X21hdGNoID0gbWF0Y2hbMF0ubWF0Y2goYWx0X3JlZ2V4KTtcblxuICAgIHJldHVybiB7IGZpbGVOYW1lOiBmaWxlX21hdGNoID8gZmlsZV9tYXRjaFswXSA6ICcnLCBcbiAgICAgICAgICAgIGFsdFRleHQ6IGFsdF9tYXRjaCA/IGFsdF9tYXRjaFswXSA6ICcnIH1cbn0gICAgXG5cbi8vIEdldHRpbmcgQWN0aXZlIE1hcmtkb3duIEZpbGVcbmV4cG9ydCBjb25zdCBnZXRBY3RpdmVOb3RlRmlsZSA9ICh3b3Jrc3BhY2U6IFdvcmtzcGFjZSkgPT4ge1xuICAgIHJldHVybiB3b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xufVxuXG4vLyBHZXQgQWN0aXZlIEVkaXRvclxuZXhwb3J0IGNvbnN0IGdldENtRWRpdG9yID0gKHdvcmtzcGFjZTogV29ya3NwYWNlKTogQ29kZU1pcnJvci5FZGl0b3IgPT4ge1xuICAgIHJldHVybiB3b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpPy5zb3VyY2VNb2RlPy5jbUVkaXRvclxufVxuXG5jb25zdCBnZXRQYXRoT2ZWYXVsdCA9ICh2YXVsdDogVmF1bHQpOiBzdHJpbmcgPT4ge1xuICAgIHZhciBwYXRoID0gdmF1bHQuYWRhcHRlci5iYXNlUGF0aDtcbiAgICBpZihwYXRoLnN0YXJ0c1dpdGgoJy8nKSkgcmV0dXJuICdhcHA6Ly9sb2NhbCcgKyBwYXRoXG4gICAgcmV0dXJuICdhcHA6Ly9sb2NhbC8nICsgcGF0aFxufVxuXG4vLyBUZW1wb3JhcnkgU29sdXRpb24gdW50aWwgZ2V0UmVzb3VyY2VQYXRoIGltcHJvdmVkIFxuZXhwb3J0IGNvbnN0IGdldFBhdGhPZkltYWdlID0gKHZhdWx0OiBWYXVsdCwgaW1hZ2U6IFRGaWxlKSA9PiB7XG4gICAgLy8gdmF1bHQuZ2V0UmVzb3VyY2VQYXRoKGltYWdlKSBcbiAgICByZXR1cm4gZ2V0UGF0aE9mVmF1bHQodmF1bHQpICsgJy8nICsgaW1hZ2UucGF0aCArICc/JyArIGltYWdlLnN0YXQubXRpbWVcbn1cblxuZXhwb3J0IGNvbnN0IGdldEZpbGVDbUJlbG9uZ3NUbyA9IChjbTogQ29kZU1pcnJvci5FZGl0b3IsIHdvcmtzcGFjZTogV29ya3NwYWNlKSA9PiB7XG4gICAgbGV0IGxlYWZzID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShcIm1hcmtkb3duXCIpO1xuICAgIGZvcihsZXQgaT0wOyBpIDwgbGVhZnMubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZihsZWFmc1tpXS52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3ICYmIGxlYWZzW2ldLnZpZXcuc291cmNlTW9kZT8uY21FZGl0b3IgPT0gY20pe1xuICAgICAgICAgICAgcmV0dXJuIGxlYWZzW2ldLnZpZXcuZmlsZVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufSAiLCJpbXBvcnQgeyBBcHAsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgZ2V0RmlsZU5hbWVBbmRBbHRUZXh0LCBnZXRfbGlua19pbl9saW5lLCBnZXRfaW1hZ2VfaW5fbGluZSxcbiAgICAgICAgZ2V0QWN0aXZlTm90ZUZpbGUsIGdldFBhdGhPZkltYWdlLCBnZXRGaWxlQ21CZWxvbmdzVG8sXG4gICAgICAgIGNsZWFyTGluZVdpZGdldHMgfSBmcm9tICcuL3V0aWxzJztcblxuLy8gQ2hlY2sgU2luZ2xlIExpbmVcbmV4cG9ydCBjb25zdCBjaGVja19saW5lOiBhbnkgPSAoY206IENvZGVNaXJyb3IuRWRpdG9yLCBsaW5lX251bWJlcjogbnVtYmVyLCB0YXJnZXRGaWxlOlRGaWxlLCBhcHA6IEFwcCkgPT4ge1xuXG4gICAgLy8gR2V0IHRoZSBMaW5lIGVkaXRlZFxuICAgIGNvbnN0IGxpbmUgPSBjbS5saW5lSW5mbyhsaW5lX251bWJlcik7XG4gICAgaWYobGluZSA9PT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGxpbmUgaXMgYW4gaW50ZXJuZXQgbGlua1xuICAgIGNvbnN0IGxpbmtfaW5fbGluZSA9IGdldF9saW5rX2luX2xpbmUobGluZS50ZXh0KTtcbiAgICBjb25zdCBpbWdfaW5fbGluZSA9IGdldF9pbWFnZV9pbl9saW5lKGxpbmUudGV4dCk7XG5cbiAgICAvLyBDbGVhciB0aGUgd2lkZ2V0IGlmIGxpbmsgd2FzIHJlbW92ZWRcbiAgICB2YXIgbGluZV9pbWFnZV93aWRnZXQgPSBsaW5lLndpZGdldHMgPyBsaW5lLndpZGdldHMuZmlsdGVyKCh3aWQ6IHsgY2xhc3NOYW1lOiBzdHJpbmc7IH0pID0+IHdpZC5jbGFzc05hbWUgPT09ICdvei1pbWFnZS13aWRnZXQnKSA6IGZhbHNlO1xuICAgIGlmKGxpbmVfaW1hZ2Vfd2lkZ2V0ICYmICEoaW1nX2luX2xpbmUucmVzdWx0IHx8IGxpbmtfaW5fbGluZS5yZXN1bHQpKSBsaW5lX2ltYWdlX3dpZGdldFswXS5jbGVhcigpO1xuXG4gICAgLy8gSWYgYW55IG9mIHJlZ2V4IG1hdGNoZXMsIGl0IHdpbGwgYWRkIGltYWdlIHdpZGdldFxuICAgIGlmKGxpbmtfaW5fbGluZS5yZXN1bHQgfHwgaW1nX2luX2xpbmUucmVzdWx0KXtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyBDbGVhciB0aGUgaW1hZ2Ugd2lkZ2V0cyBpZiBleGlzdHNcbiAgICAgICAgY2xlYXJMaW5lV2lkZ2V0cyhsaW5lKTtcblxuICAgICAgICAvLyBHZXQgdGhlIGZpbGUgbmFtZSBhbmQgYWx0IHRleHQgZGVwZW5kaW5nIG9uIGZvcm1hdFxuICAgICAgICB2YXIgZmlsZW5hbWUgPSAnJztcbiAgICAgICAgdmFyIGFsdCA9ICcnO1xuICAgICAgICBcbiAgICAgICAgaWYobGlua19pbl9saW5lLnJlc3VsdCl7XG4gICAgICAgICAgICAvLyBsaW5rVHlwZSAzIGFuZCA0XG4gICAgICAgICAgICBmaWxlbmFtZSA9IGdldEZpbGVOYW1lQW5kQWx0VGV4dChsaW5rX2luX2xpbmUubGlua1R5cGUsIGxpbmtfaW5fbGluZS5yZXN1bHQpLmZpbGVOYW1lXG4gICAgICAgICAgICBhbHQgPSBnZXRGaWxlTmFtZUFuZEFsdFRleHQobGlua19pbl9saW5lLmxpbmtUeXBlLCBsaW5rX2luX2xpbmUucmVzdWx0KS5hbHRUZXh0XG4gICAgICAgIH0gZWxzZSBpZihpbWdfaW5fbGluZS5yZXN1bHQpe1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBnZXRGaWxlTmFtZUFuZEFsdFRleHQoaW1nX2luX2xpbmUubGlua1R5cGUsIGltZ19pbl9saW5lLnJlc3VsdCkuZmlsZU5hbWU7XG4gICAgICAgICAgICBhbHQgPSBnZXRGaWxlTmFtZUFuZEFsdFRleHQoaW1nX2luX2xpbmUubGlua1R5cGUsIGltZ19pbl9saW5lLnJlc3VsdCkuYWx0VGV4dFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgSW1hZ2VcbiAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgc3JjIGZvciB0aGUgSW1hZ2VcbiAgICAgICAgaWYobGlua19pbl9saW5lLnJlc3VsdCl7XG4gICAgICAgICAgICBpbWcuc3JjID0gZmlsZW5hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTb3VyY2UgUGF0aFxuICAgICAgICAgICAgdmFyIHNvdXJjZVBhdGggPSAnJztcbiAgICAgICAgICAgIGlmKHRhcmdldEZpbGUgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgc291cmNlUGF0aCA9IHRhcmdldEZpbGUucGF0aDtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGxldCBhY3RpdmVOb3RlRmlsZSA9IGdldEFjdGl2ZU5vdGVGaWxlKGFwcC53b3Jrc3BhY2UpO1xuICAgICAgICAgICAgICAgIHNvdXJjZVBhdGggPSBhY3RpdmVOb3RlRmlsZSA/IGFjdGl2ZU5vdGVGaWxlLnBhdGggOiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbWFnZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KGRlY29kZVVSSUNvbXBvbmVudChmaWxlbmFtZSksIHNvdXJjZVBhdGgpO1xuICAgICAgICAgICAgaWYoaW1hZ2UgIT0gbnVsbCkgaW1nLnNyYyA9IGdldFBhdGhPZkltYWdlKGFwcC52YXVsdCwgaW1hZ2UpXG4gICAgICAgIH1cbiAgICAgICAgLy8gSW1hZ2UgUHJvcGVydGllc1xuICAgICAgICBpbWcuYWx0ID0gYWx0O1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIEltYWdlIHdpZGdldCB1bmRlciB0aGUgSW1hZ2UgTWFya2Rvd25cbiAgICAgICAgY20uYWRkTGluZVdpZGdldChsaW5lX251bWJlciwgaW1nLCB7Y2xhc3NOYW1lOiAnb3otaW1hZ2Utd2lkZ2V0J30pOyAgICAgICAgICAgIFxuICAgIH1cbn1cblxuLy8gQ2hlY2sgQWxsIExpbmVzIEZ1bmN0aW9uXG5leHBvcnQgY29uc3QgY2hlY2tfbGluZXM6IGFueSA9IChjbTogQ29kZU1pcnJvci5FZGl0b3IsIGZyb206IG51bWJlciwgdG86IG51bWJlciwgYXBwOiBBcHApID0+IHtcbiAgICAvLyBMYXN0IFVzZWQgTGluZSBOdW1iZXIgaW4gQ29kZSBNaXJyb3JcbiAgICB2YXIgZmlsZSA9IGdldEZpbGVDbUJlbG9uZ3NUbyhjbSwgYXBwLndvcmtzcGFjZSk7XG4gICAgZm9yKGxldCBpPWZyb207IGkgPD0gdG87IGkrKyl7XG4gICAgICAgIGNoZWNrX2xpbmUoY20sIGksIGZpbGUsIGFwcCk7XG4gICAgfVxufSIsImltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IGNsZWFyV2lkZ2V0cywgZ2V0RmlsZUNtQmVsb25nc1RvIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBjaGVja19saW5lLCBjaGVja19saW5lcyB9IGZyb20gJy4vY2hlY2stbGluZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE96YW5JbWFnZVBsdWdpbiBleHRlbmRzIFBsdWdpbntcblxuICAgIG9ubG9hZCgpe1xuICAgICAgICBjb25zb2xlLmxvZygnSW1hZ2UgaW4gRWRpdG9yIFBsdWdpbiBpcyBsb2FkZWQnKTtcbiAgICAgICAgLy8gUmVnaXN0ZXIgZXZlbnQgZm9yIGVhY2ggY2hhbmdlXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb2RlTWlycm9yKCAoY206IENvZGVNaXJyb3IuRWRpdG9yKSA9PiB7XG4gICAgICAgICAgICBjbS5vbihcImNoYW5nZVwiLCB0aGlzLmNvZGVtaXJyb3JMaW5lQ2hhbmdlcyk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUluaXRpYWxMb2FkKGNtKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBvbnVubG9hZCgpe1xuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuaXRlcmF0ZUNvZGVNaXJyb3JzKCAoY20pID0+IHtcbiAgICAgICAgICAgIGNtLm9mZihcImNoYW5nZVwiLCB0aGlzLmNvZGVtaXJyb3JMaW5lQ2hhbmdlcyk7XG4gICAgICAgICAgICBjbGVhcldpZGdldHMoY20pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coJ0ltYWdlIGluIEVkaXRvciBQbHVnaW4gaXMgdW5sb2FkZWQnKTtcbiAgICB9XG5cbiAgICAvLyBMaW5lIEVkaXQgQ2hhbmdlc1xuICAgIGNvZGVtaXJyb3JMaW5lQ2hhbmdlcyA9IChjbTogYW55LCBjaGFuZ2U6IGFueSkgPT4ge1xuICAgICAgICBjaGVja19saW5lcyhjbSwgY2hhbmdlLmZyb20ubGluZSwgY2hhbmdlLmZyb20ubGluZSArIGNoYW5nZS50ZXh0Lmxlbmd0aCAtIDEsIHRoaXMuYXBwKTtcbiAgICB9XG5cbiAgICAvLyBPbmx5IFRyaWdnZXJlZCBkdXJpbmcgaW5pdGlhbCBMb2FkXG4gICAgaGFuZGxlSW5pdGlhbExvYWQgPSAoY206IENvZGVNaXJyb3IuRWRpdG9yKSA9PiB7XG4gICAgICAgIHZhciBsYXN0TGluZSA9IGNtLmxhc3RMaW5lKCk7XG4gICAgICAgIHZhciBmaWxlID0gZ2V0RmlsZUNtQmVsb25nc1RvKGNtLCB0aGlzLmFwcC53b3Jrc3BhY2UpO1xuICAgICAgICBmb3IobGV0IGk9MDsgaSA8IGxhc3RMaW5lOyBpKyspe1xuICAgICAgICAgICAgY2hlY2tfbGluZShjbSwgaSwgZmlsZSwgdGhpcy5hcHApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxufSJdLCJuYW1lcyI6WyJNYXJrZG93blZpZXciLCJQbHVnaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBO0FBQ08sTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFxQjtJQUM5QyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBQztRQUM1QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzFCO0FBQ0wsQ0FBQyxDQUFBO0FBRUQ7QUFDTyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBUztJQUN0QyxJQUFHLElBQUksQ0FBQyxPQUFPLEVBQUM7UUFDWixLQUFJLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUM7WUFDMUIsSUFBSSxHQUFHLENBQUMsU0FBUyxLQUFLLGlCQUFpQixFQUFDO2dCQUNwQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7YUFDZDtTQUNKO0tBQ0o7QUFDTCxDQUFDLENBQUE7QUFFRDtBQUNPLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFZO0lBQ3pDLE1BQU0sa0JBQWtCLEdBQUcsa0NBQWtDLENBQUE7SUFDN0QsTUFBTSxrQkFBa0IsR0FBRyx5Q0FBeUMsQ0FBQTtJ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
