/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

// Remove Widgets in CodeMirror Editor
const clearWidges = (cm) => {
    var lastLine = cm.lastLine();
    for (let i = 0; i <= lastLine; i++) {
        // Get the current Line
        const line = cm.lineInfo(i);
        // Clear the image widgets if exists
        if (line.widgets) {
            for (const wid of line.widgets) {
                if (wid.className === 'oz-image-widget') {
                    wid.clear();
                }
            }
        }
    }
};
// Http, Https Link Check
const filename_is_a_link = (filename) => {
    const url_regex = /^[a-z][a-z0-9+\-.]+:/i;
    return filename.match(url_regex) != null;
};
// Image Name and Alt Text
const getFileNameAndAltText = (linkType, match) => {
    /*
       linkType 1: [[myimage.jpg|#x-small]]
       linkType2: ![#x-small](myimage.jpg)
       returns { fileName: '', altText: '' }
    */
    var file_name_regex;
    var alt_regex;
    if (linkType == 1) {
        file_name_regex = /(?<=\[\[).*(jpe?g|png|gif)/;
        alt_regex = /(?<=\|).*(?=]])/;
    }
    else if (linkType == 2) {
        file_name_regex = /(?<=\().*(jpe?g|png|gif)/;
        alt_regex = /(?<=\[)(^$|.*)(?=\])/;
    }
    var file_match = match[0].match(file_name_regex);
    var alt_match = match[0].match(alt_regex);
    return { fileName: file_match ? file_match[0] : '',
        altText: alt_match ? alt_match[0] : '' };
};
// Getting Active Markdown File
const getActiveNoteFile = (workspace) => {
    return workspace.getActiveFile();
};
const getPathOfVault = (vault) => {
    var path = vault.adapter.basePath;
    if (path.startsWith('/'))
        return 'app://local' + path;
    return 'app://local/' + path;
};
// Temporary Solution until getResourcePath improved 
const getPathOfImage = (vault, image) => {
    // vault.getResourcePath(image) 
    return getPathOfVault(vault) + '/' + image.path;
};
const getFileCmBelongsTo = (cm, workspace) => {
    var _a;
    let leafs = workspace.getLeavesOfType("markdown");
    for (let i = 0; i < leafs.length; i++) {
        if (((_a = leafs[i].view.sourceMode) === null || _a === void 0 ? void 0 : _a.cmEditor) == cm) {
            return leafs[i].view.file;
        }
    }
    return null;
};

class OzanImagePlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        // Line Edit Changes
        this.codemirrorLineChanges = (cm, change) => {
            this.check_lines(cm, change.from.line, change.from.line + change.text.length - 1);
        };
        // Check Single Line
        this.check_line = (cm, line_number, targetFile) => {
            // Regex for [[ ]] format
            const image_line_regex_1 = /!\[\[.*(jpe?g|png|gif).*\]\]/;
            // Regex for ![ ]( ) format
            const image_line_regex_2 = /!\[(^$|.*)\]\(.*(jpe?g|png|gif)\)/;
            // Get the Line edited
            const line = cm.lineInfo(line_number);
            if (line === null)
                return;
            // Current Line Comparison with Regex
            const match_1 = line.text.match(image_line_regex_1);
            const match_2 = line.text.match(image_line_regex_2);
            // Clear the widget if link was removed
            var line_image_widget = line.widgets ? line.widgets.filter((wid) => wid.className === 'oz-image-widget') : false;
            if (line_image_widget && (!match_1 || !match_2))
                line_image_widget[0].clear();
            // If any of regex matches, it will add image widget
            if (match_1 || match_2) {
                // Clear the image widgets if exists
                if (line.widgets) {
                    for (const wid of line.widgets) {
                        if (wid.className === 'oz-image-widget') {
                            wid.clear();
                        }
                    }
                }
                // Get the file name and alt text depending on format
                var filename = '';
                var alt = '';
                if (match_1) {
                    // Regex for [[myimage.jpg|#x-small]] format
                    filename = getFileNameAndAltText(1, match_1).fileName;
                    alt = getFileNameAndAltText(1, match_1).altText;
                }
                else if (match_2) {
                    // Regex for ![#x-small](myimage.jpg) format
                    filename = getFileNameAndAltText(2, match_2).fileName;
                    alt = getFileNameAndAltText(2, match_2).altText;
                }
                // Create Image
                const img = document.createElement('img');
                // Prepare the src for the Image
                if (filename_is_a_link(filename)) {
                    img.src = filename;
                }
                else {
                    // Source Path
                    var sourcePath = '';
                    if (targetFile != null) {
                        sourcePath = targetFile.path;
                    }
                    else {
                        let activeNoteFile = getActiveNoteFile(this.app.workspace);
                        sourcePath = activeNoteFile ? activeNoteFile.path : '';
                    }
                    var image = this.app.metadataCache.getFirstLinkpathDest(decodeURIComponent(filename), sourcePath);
                    if (image != null)
                        img.src = getPathOfImage(this.app.vault, image);
                }
                // Image Properties
                img.alt = alt;
                img.style.maxWidth = '100%';
                img.style.height = 'auto';
                // Add Image widget under the Image Markdown
                cm.addLineWidget(line_number, img, { className: 'oz-image-widget' });
            }
        };
        // Check All Lines Function
        this.check_lines = (cm, from, to) => {
            // Last Used Line Number in Code Mirror
            var file = getFileCmBelongsTo(cm, this.app.workspace);
            for (let i = from; i <= to; i++) {
                this.check_line(cm, i, file);
            }
        };
    }
    onload() {
        // Register event for each change
        this.registerCodeMirror((cm) => {
            cm.on("change", this.codemirrorLineChanges);
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.on("change", this.codemirrorLineChanges);
            clearWidges(cm);
        });
        new obsidian.Notice('Image in Editor Plugin is unloaded');
    }
}

module.exports = OzanImagePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
