/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

// Remove Widgets in CodeMirror Editor
const clearWidges = (cm) => {
    var lastLine = cm.lastLine();
    for (let i = 0; i <= lastLine; i++) {
        // Get the current Line
        const line = cm.lineInfo(i);
        // Clear the image widgets if exists
        if (line.widgets) {
            for (const wid of line.widgets) {
                if (wid.className === 'oz-image-widget') {
                    wid.clear();
                }
            }
        }
    }
};
// Http, Https Link Check
const filename_is_a_link = (filename) => filename.startsWith('http');
// Image Name and Alt Text
const getFileNameAndAltText = (linkType, match) => {
    /*
       linkType 1: [[myimage.jpg|#x-small]]
       linkType2: ![#x-small](myimage.jpg)
       returns { fileName: '', altText: '' }
    */
    var file_name_regex;
    var alt_regex;
    if (linkType == 1) {
        file_name_regex = /(?<=\[\[).*(jpe?g|png|gif)/;
        alt_regex = /(?<=\|).*(?=]])/;
    }
    else if (linkType == 2) {
        file_name_regex = /(?<=\().*(jpe?g|png|gif)/;
        alt_regex = /(?<=\[)(^$|.*)(?=\])/;
    }
    var file_match = match[0].match(file_name_regex);
    var alt_match = match[0].match(alt_regex);
    return { fileName: file_match ? file_match[0] : '',
        altText: alt_match ? alt_match[0] : '' };
};
// Getting Active Markdown File
const getActiveNoteFile = (workspace) => {
    return workspace.activeLeaf.view.file;
};
// Get Active Editor
const getCmEditor = (workspace) => {
    var _a, _b;
    return (_b = (_a = workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.sourceMode) === null || _b === void 0 ? void 0 : _b.cmEditor;
};
const getPathOfVault = (vault) => {
    var path = vault.adapter.basePath;
    if (path.startsWith('/'))
        return 'app://local' + path;
    return 'app://local/' + path;
};
// Temporary Solution until getResourcePath improved 
const getPathOfImage = (vault, image) => {
    // vault.getResourcePath(image) 
    return getPathOfVault(vault) + '/' + image.path;
};

class OzanImagePlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.codemirrorLineChanges = (cm, changes) => {
            changes.some((change) => {
                this.check_line(cm, change.to.line);
            });
        };
        this.codemirrorScreenChange = (cm) => {
            return this.check_lines(cm);
        };
        // Check Single Line
        this.check_line = (cm, line_number, targetFile) => {
            // Regex for [[ ]] format
            const image_line_regex_1 = /!\[\[.*(jpe?g|png|gif).*\]\]/;
            // Regex for ![ ]( ) format
            const image_line_regex_2 = /!\[(^$|.*)\]\(.*(jpe?g|png|gif)\)/;
            // Get the Line edited
            const line = cm.lineInfo(line_number);
            if (line === null)
                return;
            // Current Line Comparison with Regex
            const match_1 = line.text.match(image_line_regex_1);
            const match_2 = line.text.match(image_line_regex_2);
            // Clear the widget if link was removed
            var line_image_widget = line.widgets ? line.widgets.filter((wid) => wid.className === 'oz-image-widget') : false;
            if (line_image_widget && (!match_1 || !match_2))
                line_image_widget[0].clear();
            // If any of regex matches, it will add image widget
            if (match_1 || match_2) {
                // Clear the image widgets if exists
                if (line.widgets) {
                    for (const wid of line.widgets) {
                        if (wid.className === 'oz-image-widget') {
                            wid.clear();
                        }
                    }
                }
                // Get the file name and alt text depending on format
                var filename = '';
                var alt = '';
                if (match_1) {
                    // Regex for [[myimage.jpg|#x-small]] format
                    filename = getFileNameAndAltText(1, match_1).fileName;
                    alt = getFileNameAndAltText(1, match_1).altText;
                }
                else if (match_2) {
                    // Regex for ![#x-small](myimage.jpg) format
                    filename = getFileNameAndAltText(2, match_2).fileName;
                    alt = getFileNameAndAltText(2, match_2).altText;
                }
                // Create Image
                const img = document.createElement('img');
                // Prepare the src for the Image
                if (filename_is_a_link(filename)) {
                    img.src = filename;
                }
                else {
                    // Source Path
                    var sourcePath = '';
                    if (targetFile) {
                        sourcePath = targetFile.path;
                    }
                    else {
                        sourcePath = getActiveNoteFile(this.app.workspace).path;
                    }
                    var image = this.app.metadataCache.getFirstLinkpathDest(decodeURIComponent(filename), sourcePath);
                    if (image != null)
                        img.src = getPathOfImage(this.app.vault, image);
                }
                // Image Properties
                img.alt = alt;
                img.style.maxWidth = '100%';
                img.style.height = 'auto';
                // Add Image widget under the Image Markdown
                cm.addLineWidget(line_number, img, { className: 'oz-image-widget' });
            }
        };
        // Check All Lines Function
        this.check_lines = (cm, targetFile) => {
            // Last Used Line Number in Code Mirror
            var lastLine = cm.lastLine();
            for (let i = 0; i <= lastLine; i++) {
                if (obsidian.TFile) {
                    this.check_line(cm, i);
                }
                else {
                    this.check_line(cm, i, obsidian.TFile);
                }
            }
        };
        // Handle file after file-open event
        this.handleFile = (targetFile) => {
            // If the file fired is a markdown file
            if (targetFile && targetFile.extension === 'md') {
                // Get the open CodeMirror to check the lines
                this.check_lines(getCmEditor(this.app.workspace), targetFile);
            }
        };
    }
    onload() {
        // Each file open will fire
        this.registerEvent(this.app.workspace.on("file-open", this.handleFile));
        // Register event for each change
        this.registerCodeMirror((cm) => {
            cm.on("changes", this.codemirrorLineChanges);
        });
        // Check the active CodeMirror during load
        this.app.workspace.iterateCodeMirrors((cm) => {
            this.check_lines(cm);
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors((cm) => {
            this.app.workspace.off("file-open", this.handleFile);
            cm.off("changes", this.codemirrorLineChanges);
            clearWidges(cm);
        });
        new obsidian.Notice('Image in Editor Plugin is unloaded');
    }
}

module.exports = OzanImagePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
