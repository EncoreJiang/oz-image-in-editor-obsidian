/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

class OzanImagePlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.codemirrorLineChanges = (cm, changes) => {
            changes.some((change) => {
                this.check_line(cm, change.to.line);
            });
        };
        this.codemirrorScreenChange = (cm) => {
            return this.check_lines(cm);
        };
        // Check Single Line
        this.check_line = (cm, line_number) => {
            // Regex for [[ ]] format
            const image_line_regex_1 = /!\[\[.*(jpe?g|png|gif).*\]\]/;
            // Regex for ![ ]( ) format
            const image_line_regex_2 = /!\[(^$|.*)\]\(.*(jpe?g|png|gif)\)/;
            // Get the Line edited
            const line = cm.lineInfo(line_number);
            if (line === null)
                return;
            // Current Line Comparison with Regex
            const match_1 = line.text.match(image_line_regex_1);
            const match_2 = line.text.match(image_line_regex_2);
            // Clear the widget if link was removed
            var line_image_widget = line.widgets ? line.widgets.filter((wid) => wid.className === 'oz-image-widget') : false;
            if (line_image_widget && (!match_1 || !match_2))
                line_image_widget[0].clear();
            // If any of regex matches, it will add image widget
            if (match_1 || match_2) {
                // Clear the image widgets if exists
                if (line.widgets) {
                    for (const wid of line.widgets) {
                        if (wid.className === 'oz-image-widget') {
                            wid.clear();
                        }
                    }
                }
                // Get the file name and alt text depending on format
                var filename = '';
                var alt = '';
                if (match_1) {
                    // Regex for [[myimage.jpg|#x-small]] format
                    filename = this.getFileNameAndAltText(1, match_1).fileName;
                    alt = this.getFileNameAndAltText(1, match_1).altText;
                }
                else if (match_2) {
                    // Regex for ![#x-small](myimage.jpg) format
                    filename = this.getFileNameAndAltText(2, match_2).fileName;
                    alt = this.getFileNameAndAltText(2, match_2).altText;
                }
                // Create Image
                const img = document.createElement('img');
                // Prepare the src for the Image
                if (this.filename_is_a_link(filename)) {
                    img.src = filename;
                }
                else {
                    // TODO: this.getActiveNoteFile() to be replaced: if 2-3 notes are open during load, only the active one loads images
                    var image = this.app.metadataCache.getFirstLinkpathDest(decodeURIComponent(filename), this.getActiveNoteFile().path);
                    if (image != null)
                        img.src = this.app.vault.getResourcePath(image);
                    // NOTE: doesn't blink with : 'app://local/Users/ozan/Desktop/Debug/' + image.path
                }
                // Image Properties
                img.alt = alt;
                img.style.maxWidth = '100%';
                img.style.height = 'auto';
                // Add Image widget under the Image Markdown
                cm.addLineWidget(line_number, img, { className: 'oz-image-widget' });
            }
        };
        // Check All Lines Function
        this.check_lines = (cm) => {
            // Last Used Line Number in Code Mirror
            var lastLine = cm.lastLine();
            for (let i = 0; i <= lastLine; i++) {
                this.check_line(cm, i);
            }
        };
        // Http, Https Link Check
        this.filename_is_a_link = (filename) => filename.startsWith('http');
        // Remove Widgets in CodeMirror Editor
        this.clearWidges = (cm) => {
            var lastLine = cm.lastLine();
            for (let i = 0; i <= lastLine; i++) {
                // Get the current Line
                const line = cm.lineInfo(i);
                // Clear the image widgets if exists
                if (line.widgets) {
                    for (const wid of line.widgets) {
                        if (wid.className === 'oz-image-widget') {
                            wid.clear();
                        }
                    }
                }
            }
        };
        // Get Active Editor
        this.getEditor = () => {
            var _a;
            return (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;
        };
        // Handle file after file-open event
        this.handleFile = (file) => {
            // If the file fired is a markdown file
            if (file.extension === 'md') {
                // Get the open CodeMirror to check the lines
                this.app.workspace.iterateCodeMirrors((cm) => {
                    // TODO: There is no Public API to read cm from Editor
                    var editor = this.getEditor();
                    if (editor.cm == cm) {
                        this.check_lines(cm);
                    }
                });
            }
        };
    }
    onload() {
        // Each file open will fire
        this.registerEvent(this.app.workspace.on("file-open", this.handleFile));
        // Register event for each change
        this.registerCodeMirror((cm) => {
            cm.on("changes", this.codemirrorLineChanges);
        });
        // Check the active CodeMirror during load
        this.app.workspace.iterateCodeMirrors((cm) => {
            this.check_lines(cm);
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors((cm) => {
            this.app.workspace.off("file-open", this.handleFile);
            cm.off("changes", this.codemirrorLineChanges);
            this.clearWidges(cm);
        });
        new obsidian.Notice('Image in Editor Plugin is unloaded');
    }
    // Getting Active Markdown File
    getActiveNoteFile() {
        return this.app.workspace.activeLeaf.view.file;
    }
    // Image Name and Alt Text
    getFileNameAndAltText(linkType, match) {
        /* linkType 1: [[myimage.jpg|#x-small]]
           linkType2: ![#x-small](myimage.jpg)
        returns { fileName: '', altText: '' }   */
        var file_name_regex;
        var alt_regex;
        if (linkType == 1) {
            file_name_regex = /(?<=\[\[).*(jpe?g|png|gif)/;
            alt_regex = /(?<=\|).*(?=]])/;
        }
        else if (linkType == 2) {
            file_name_regex = /(?<=\().*(jpe?g|png|gif)/;
            alt_regex = /(?<=\[)(^$|.*)(?=\])/;
        }
        var file_match = match[0].match(file_name_regex);
        var alt_match = match[0].match(alt_regex);
        return { fileName: file_match ? file_match[0] : '',
            altText: alt_match ? alt_match[0] : '' };
    }
}

module.exports = OzanImagePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW4sIE5vdGljZSwgTWFya2Rvd25WaWV3LCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3phbkltYWdlUGx1Z2luIGV4dGVuZHMgUGx1Z2lue1xuXG4gICAgb25sb2FkKCl7XG4gICAgICAgIC8vIEVhY2ggZmlsZSBvcGVuIHdpbGwgZmlyZVxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJmaWxlLW9wZW5cIiwgdGhpcy5oYW5kbGVGaWxlKVxuICAgICAgICApXG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgZXZlbnQgZm9yIGVhY2ggY2hhbmdlXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb2RlTWlycm9yKCAoY206IENvZGVNaXJyb3IuRWRpdG9yKSA9PiB7XG4gICAgICAgICAgICBjbS5vbihcImNoYW5nZXNcIiwgdGhpcy5jb2RlbWlycm9yTGluZUNoYW5nZXMpO1xuICAgICAgICB9KVxuXG4gICAgICAgIC8vIENoZWNrIHRoZSBhY3RpdmUgQ29kZU1pcnJvciBkdXJpbmcgbG9hZFxuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuaXRlcmF0ZUNvZGVNaXJyb3JzKCAoY20pID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfbGluZXMoY20pO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvZGVtaXJyb3JMaW5lQ2hhbmdlcyA9IChjbTogYW55LCBjaGFuZ2VzOiBhbnkpID0+IHtcbiAgICAgICAgY2hhbmdlcy5zb21lKCAoY2hhbmdlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfbGluZShjbSwgY2hhbmdlLnRvLmxpbmUpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvZGVtaXJyb3JTY3JlZW5DaGFuZ2UgPSAoY206IENvZGVNaXJyb3IuRWRpdG9yKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrX2xpbmVzKGNtKTtcbiAgICB9XG5cbiAgICBvbnVubG9hZCgpe1xuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuaXRlcmF0ZUNvZGVNaXJyb3JzKCAoY20pID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vZmYoXCJmaWxlLW9wZW5cIiwgdGhpcy5oYW5kbGVGaWxlKTtcbiAgICAgICAgICAgIGNtLm9mZihcImNoYW5nZXNcIiwgdGhpcy5jb2RlbWlycm9yTGluZUNoYW5nZXMpO1xuICAgICAgICAgICAgdGhpcy5jbGVhcldpZGdlcyhjbSk7XG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgTm90aWNlKCdJbWFnZSBpbiBFZGl0b3IgUGx1Z2luIGlzIHVubG9hZGVkJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgU2luZ2xlIExpbmVcbiAgICBjaGVja19saW5lOiBhbnkgPSAoY206IENvZGVNaXJyb3IuRWRpdG9yLCBsaW5lX251bWJlcjogbnVtYmVyKSA9PiB7XG5cbiAgICAgICAgLy8gUmVnZXggZm9yIFtbIF1dIGZvcm1hdFxuICAgICAgICBjb25zdCBpbWFnZV9saW5lX3JlZ2V4XzEgPSAvIVxcW1xcWy4qKGpwZT9nfHBuZ3xnaWYpLipcXF1cXF0vXG4gICAgICAgICAgICBcbiAgICAgICAgLy8gUmVnZXggZm9yICFbIF0oICkgZm9ybWF0XG4gICAgICAgIGNvbnN0IGltYWdlX2xpbmVfcmVnZXhfMiA9IC8hXFxbKF4kfC4qKVxcXVxcKC4qKGpwZT9nfHBuZ3xnaWYpXFwpL1xuXG4gICAgICAgIC8vIEdldCB0aGUgTGluZSBlZGl0ZWRcbiAgICAgICAgY29uc3QgbGluZSA9IGNtLmxpbmVJbmZvKGxpbmVfbnVtYmVyKTtcbiAgICAgICAgXG4gICAgICAgIGlmKGxpbmUgPT09IG51bGwpIHJldHVybjtcblxuICAgICAgICAvLyBDdXJyZW50IExpbmUgQ29tcGFyaXNvbiB3aXRoIFJlZ2V4XG4gICAgICAgIGNvbnN0IG1hdGNoXzEgPSBsaW5lLnRleHQubWF0Y2goaW1hZ2VfbGluZV9yZWdleF8xKTtcbiAgICAgICAgY29uc3QgbWF0Y2hfMiA9IGxpbmUudGV4dC5tYXRjaChpbWFnZV9saW5lX3JlZ2V4XzIpO1xuXG4gICAgICAgIC8vIENsZWFyIHRoZSB3aWRnZXQgaWYgbGluayB3YXMgcmVtb3ZlZFxuICAgICAgICB2YXIgbGluZV9pbWFnZV93aWRnZXQgPSBsaW5lLndpZGdldHMgPyBsaW5lLndpZGdldHMuZmlsdGVyKCh3aWQ6IHsgY2xhc3NOYW1lOiBzdHJpbmc7IH0pID0+IHdpZC5jbGFzc05hbWUgPT09ICdvei1pbWFnZS13aWRnZXQnKSA6IGZhbHNlO1xuICAgICAgICBpZihsaW5lX2ltYWdlX3dpZGdldCAmJiAoIW1hdGNoXzEgfHwgIW1hdGNoXzIpKSBsaW5lX2ltYWdlX3dpZGdldFswXS5jbGVhcigpO1xuXG4gICAgICAgIC8vIElmIGFueSBvZiByZWdleCBtYXRjaGVzLCBpdCB3aWxsIGFkZCBpbWFnZSB3aWRnZXRcbiAgICAgICAgaWYobWF0Y2hfMSB8fCBtYXRjaF8yKXtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsZWFyIHRoZSBpbWFnZSB3aWRnZXRzIGlmIGV4aXN0c1xuICAgICAgICAgICAgaWYgKGxpbmUud2lkZ2V0cyl7XG4gICAgICAgICAgICAgICAgZm9yKGNvbnN0IHdpZCBvZiBsaW5lLndpZGdldHMpe1xuICAgICAgICAgICAgICAgICAgICBpZiAod2lkLmNsYXNzTmFtZSA9PT0gJ296LWltYWdlLXdpZGdldCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkLmNsZWFyKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBmaWxlIG5hbWUgYW5kIGFsdCB0ZXh0IGRlcGVuZGluZyBvbiBmb3JtYXRcbiAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9ICcnO1xuICAgICAgICAgICAgdmFyIGFsdCA9ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihtYXRjaF8xKXtcbiAgICAgICAgICAgICAgICAvLyBSZWdleCBmb3IgW1tteWltYWdlLmpwZ3wjeC1zbWFsbF1dIGZvcm1hdFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gdGhpcy5nZXRGaWxlTmFtZUFuZEFsdFRleHQoMSwgbWF0Y2hfMSkuZmlsZU5hbWVcbiAgICAgICAgICAgICAgICBhbHQgPSB0aGlzLmdldEZpbGVOYW1lQW5kQWx0VGV4dCgxLCBtYXRjaF8xKS5hbHRUZXh0XG4gICAgICAgICAgICB9IGVsc2UgaWYobWF0Y2hfMil7XG4gICAgICAgICAgICAgICAgLy8gUmVnZXggZm9yICFbI3gtc21hbGxdKG15aW1hZ2UuanBnKSBmb3JtYXRcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IHRoaXMuZ2V0RmlsZU5hbWVBbmRBbHRUZXh0KDIsIG1hdGNoXzIpLmZpbGVOYW1lXG4gICAgICAgICAgICAgICAgYWx0ID0gdGhpcy5nZXRGaWxlTmFtZUFuZEFsdFRleHQoMiwgbWF0Y2hfMikuYWx0VGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgSW1hZ2VcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAvLyBQcmVwYXJlIHRoZSBzcmMgZm9yIHRoZSBJbWFnZVxuICAgICAgICAgICAgaWYodGhpcy5maWxlbmFtZV9pc19hX2xpbmsoZmlsZW5hbWUpKXtcbiAgICAgICAgICAgICAgICBpbWcuc3JjID0gZmlsZW5hbWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IHRoaXMuZ2V0QWN0aXZlTm90ZUZpbGUoKSB0byBiZSByZXBsYWNlZDogaWYgMi0zIG5vdGVzIGFyZSBvcGVuIGR1cmluZyBsb2FkLCBvbmx5IHRoZSBhY3RpdmUgb25lIGxvYWRzIGltYWdlc1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKSwgdGhpcy5nZXRBY3RpdmVOb3RlRmlsZSgpLnBhdGgpO1xuICAgICAgICAgICAgICAgIGlmKGltYWdlICE9IG51bGwpIGltZy5zcmMgPSAgdGhpcy5hcHAudmF1bHQuZ2V0UmVzb3VyY2VQYXRoKGltYWdlKTsgXG4gICAgICAgICAgICAgICAgLy8gTk9URTogZG9lc24ndCBibGluayB3aXRoIDogJ2FwcDovL2xvY2FsL1VzZXJzL296YW4vRGVza3RvcC9EZWJ1Zy8nICsgaW1hZ2UucGF0aFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbWFnZSBQcm9wZXJ0aWVzXG4gICAgICAgICAgICBpbWcuYWx0ID0gYWx0O1xuICAgICAgICAgICAgaW1nLnN0eWxlLm1heFdpZHRoID0gJzEwMCUnO1xuICAgICAgICAgICAgaW1nLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIEltYWdlIHdpZGdldCB1bmRlciB0aGUgSW1hZ2UgTWFya2Rvd25cbiAgICAgICAgICAgIGNtLmFkZExpbmVXaWRnZXQobGluZV9udW1iZXIsIGltZywge2NsYXNzTmFtZTogJ296LWltYWdlLXdpZGdldCd9KTsgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIEFsbCBMaW5lcyBGdW5jdGlvblxuICAgIGNoZWNrX2xpbmVzOiBhbnkgPSAoY206IENvZGVNaXJyb3IuRWRpdG9yKSA9PiB7XG4gICAgICAgIC8vIExhc3QgVXNlZCBMaW5lIE51bWJlciBpbiBDb2RlIE1pcnJvclxuICAgICAgICB2YXIgbGFzdExpbmUgPSBjbS5sYXN0TGluZSgpO1xuICAgICAgICBmb3IobGV0IGk9MDsgaSA8PSBsYXN0TGluZTsgaSsrKXtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfbGluZShjbSwgaSk7XG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cblxuICAgIC8vIEh0dHAsIEh0dHBzIExpbmsgQ2hlY2tcbiAgICBmaWxlbmFtZV9pc19hX2xpbmsgPSAoZmlsZW5hbWU6IHN0cmluZykgPT4gZmlsZW5hbWUuc3RhcnRzV2l0aCgnaHR0cCcpO1xuXG4gICAgLy8gR2V0dGluZyBBY3RpdmUgTWFya2Rvd24gRmlsZVxuICAgIGdldEFjdGl2ZU5vdGVGaWxlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLnZpZXcgYXMgTWFya2Rvd25WaWV3KS5maWxlO1xuICAgIH1cblxuICAgIC8vIEltYWdlIE5hbWUgYW5kIEFsdCBUZXh0XG4gICAgZ2V0RmlsZU5hbWVBbmRBbHRUZXh0KGxpbmtUeXBlOiBudW1iZXIsIG1hdGNoOiBhbnkpe1xuICAgICAgICAvKiBsaW5rVHlwZSAxOiBbW215aW1hZ2UuanBnfCN4LXNtYWxsXV1cbiAgICAgICAgICAgbGlua1R5cGUyOiAhWyN4LXNtYWxsXShteWltYWdlLmpwZykgXG4gICAgICAgIHJldHVybnMgeyBmaWxlTmFtZTogJycsIGFsdFRleHQ6ICcnIH0gICAqL1xuICAgICAgICB2YXIgZmlsZV9uYW1lX3JlZ2V4O1xuICAgICAgICB2YXIgYWx0X3JlZ2V4O1xuXG4gICAgICAgIGlmKGxpbmtUeXBlID09IDEpe1xuICAgICAgICAgICAgZmlsZV9uYW1lX3JlZ2V4ID0gLyg/PD1cXFtcXFspLiooanBlP2d8cG5nfGdpZikvO1xuICAgICAgICAgICAgYWx0X3JlZ2V4ID0gLyg/PD1cXHwpLiooPz1dXSkvO1xuICAgICAgICB9IGVsc2UgaWYobGlua1R5cGUgPT0gMil7XG4gICAgICAgICAgICBmaWxlX25hbWVfcmVnZXggPSAvKD88PVxcKCkuKihqcGU/Z3xwbmd8Z2lmKS87XG4gICAgICAgICAgICBhbHRfcmVnZXggPSAvKD88PVxcWykoXiR8LiopKD89XFxdKS87XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlsZV9tYXRjaCA9IG1hdGNoWzBdLm1hdGNoKGZpbGVfbmFtZV9yZWdleCk7XG4gICAgICAgIHZhciBhbHRfbWF0Y2ggPSBtYXRjaFswXS5tYXRjaChhbHRfcmVnZXgpO1xuXG4gICAgICAgIHJldHVybiB7IGZpbGVOYW1lOiBmaWxlX21hdGNoID8gZmlsZV9tYXRjaFswXSA6ICcnLCBcbiAgICAgICAgICAgICAgICBhbHRUZXh0OiBhbHRfbWF0Y2ggPyBhbHRfbWF0Y2hbMF0gOiAnJyB9XG5cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgV2lkZ2V0cyBpbiBDb2RlTWlycm9yIEVkaXRvclxuICAgIGNsZWFyV2lkZ2VzID0gKGNtOiBDb2RlTWlycm9yLkVkaXRvcikgPT4ge1xuICAgICAgICB2YXIgbGFzdExpbmUgPSBjbS5sYXN0TGluZSgpO1xuICAgICAgICBmb3IobGV0IGk9MDsgaSA8PSBsYXN0TGluZTsgaSsrKXtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBMaW5lXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gY20ubGluZUluZm8oaSk7XG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgaW1hZ2Ugd2lkZ2V0cyBpZiBleGlzdHNcbiAgICAgICAgICAgIGlmIChsaW5lLndpZGdldHMpe1xuICAgICAgICAgICAgICAgIGZvcihjb25zdCB3aWQgb2YgbGluZS53aWRnZXRzKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpZC5jbGFzc05hbWUgPT09ICdvei1pbWFnZS13aWRnZXQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZC5jbGVhcigpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBBY3RpdmUgRWRpdG9yXG4gICAgZ2V0RWRpdG9yID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KT8uZWRpdG9yXG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGZpbGUgYWZ0ZXIgZmlsZS1vcGVuIGV2ZW50XG4gICAgaGFuZGxlRmlsZSA9IChmaWxlOiBURmlsZSk6IHZvaWQgPT4ge1xuICAgICAgICAvLyBJZiB0aGUgZmlsZSBmaXJlZCBpcyBhIG1hcmtkb3duIGZpbGVcbiAgICAgICAgaWYoZmlsZS5leHRlbnNpb24gPT09ICdtZCcpe1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBvcGVuIENvZGVNaXJyb3IgdG8gY2hlY2sgdGhlIGxpbmVzXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuaXRlcmF0ZUNvZGVNaXJyb3JzKCAoY20pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBUaGVyZSBpcyBubyBQdWJsaWMgQVBJIHRvIHJlYWQgY20gZnJvbSBFZGl0b3JcbiAgICAgICAgICAgICAgICB2YXIgZWRpdG9yID0gdGhpcy5nZXRFZGl0b3IoKTtcbiAgICAgICAgICAgICAgICBpZihlZGl0b3IuY20gPT0gY20pe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrX2xpbmVzKGNtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9ICBcbiAgICB9XG59Il0sIm5hbWVzIjpbIlBsdWdpbiIsIk1hcmtkb3duVmlldyIsIk5vdGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O01BRXFCLGVBQWdCLFNBQVFBLGVBQU07SUFBbkQ7O1FBbUJJLDBCQUFxQixHQUFHLENBQUMsRUFBTyxFQUFFLE9BQVk7WUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBRSxDQUFDLE1BQVc7Z0JBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdkMsQ0FB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
