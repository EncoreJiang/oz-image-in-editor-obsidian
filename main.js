/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

// Remove Widgets in CodeMirror Editor
const clearWidgets = (cm) => {
    var lastLine = cm.lastLine();
    for (let i = 0; i <= lastLine; i++) {
        const line = cm.lineInfo(i);
        clearLineWidgets(line);
    }
};
// Clear Single Line Widget
const clearLineWidgets = (line) => {
    if (line.widgets) {
        for (const wid of line.widgets) {
            if (wid.className === 'oz-image-widget') {
                wid.clear();
            }
        }
    }
};
// Check line if it is a link
const get_link_in_line = (line) => {
    const image_http_regex_3 = /!\[\[[a-z][a-z0-9+\-.]+:\/.*\]\]/;
    const image_http_regex_4 = /!\[[^)]*\]\([a-z][a-z0-9+\-.]+:\/[^)]*\)/;
    const match_3 = line.match(image_http_regex_3);
    const match_4 = line.match(image_http_regex_4);
    if (match_3) {
        return { result: match_3, linkType: 3 };
    }
    else if (match_4) {
        return { result: match_4, linkType: 4 };
    }
    return { result: false, linkType: 0 };
};
// Check line if it is image
const get_image_in_line = (line) => {
    // Regex for [[ ]] format
    const image_line_regex_1 = /!\[\[.*(jpe?g|png|gif|svg|bmp).*\]\]/;
    // Regex for ![ ]( ) format
    const image_line_regex_2 = /!\[(^$|.*)\]\(.*(jpe?g|png|gif|svg|bmp)\)/;
    const match_1 = line.match(image_line_regex_1);
    const match_2 = line.match(image_line_regex_2);
    if (match_1) {
        return { result: match_1, linkType: 1 };
    }
    else if (match_2) {
        return { result: match_2, linkType: 2 };
    }
    return { result: false, linkType: 0 };
};
// Image Name and Alt Text
const getFileNameAndAltText = (linkType, match) => {
    /*
       linkType 1: ![[myimage.jpg|#x-small]], linkType 2: ![#x-small](myimage.jpg)
       linkType 3: ![[https://image|#x-small]], linkType 4: ![#x-small](https://image)
       returns { fileName: '', altText: '' }
    */
    var file_name_regex;
    var alt_regex;
    if (linkType == 1 || linkType == 3) {
        if (linkType == 1)
            file_name_regex = /(?<=\[\[).*(jpe?g|png|gif|svg|bmp)/;
        if (linkType == 3)
            file_name_regex = /(?<=\[\[).*(?=\|)|(?<=\[\[).*(?=\]\])/;
        alt_regex = /(?<=\|).*(?=]])/;
    }
    else if (linkType == 2 || linkType == 4) {
        if (linkType == 2)
            file_name_regex = /(?<=\().*(jpe?g|png|gif|svg|bmp)/;
        if (linkType == 4)
            file_name_regex = /(?<=\().*(?=\))/;
        alt_regex = /(?<=\[)(^$|.*)(?=\])/;
    }
    var file_match = match[0].match(file_name_regex);
    var alt_match = match[0].match(alt_regex);
    return {
        fileName: file_match ? file_match[0] : '',
        altText: alt_match ? alt_match[0] : ''
    };
};
// Getting Active Markdown File
const getActiveNoteFile = (workspace) => {
    return workspace.getActiveFile();
};
// Get Full Path of the image
const getPathOfImage = (vault, image) => {
    return vault.getResourcePath(image) + '?' + image.stat.mtime;
};
const getFileCmBelongsTo = (cm, workspace) => {
    var _a;
    let leafs = workspace.getLeavesOfType("markdown");
    for (let i = 0; i < leafs.length; i++) {
        if (leafs[i].view instanceof obsidian.MarkdownView && ((_a = leafs[i].view.sourceMode) === null || _a === void 0 ? void 0 : _a.cmEditor) == cm) {
            return leafs[i].view.file;
        }
    }
    return null;
};

// Check Single Line
const check_line = (cm, line_number, targetFile, app) => {
    // Get the Line edited
    const line = cm.lineInfo(line_number);
    if (line === null)
        return;
    // Check if the line is an internet link
    const link_in_line = get_link_in_line(line.text);
    const img_in_line = get_image_in_line(line.text);
    // Clear the widget if link was removed
    var line_image_widget = line.widgets ? line.widgets.filter((wid) => wid.className === 'oz-image-widget') : false;
    if (line_image_widget && !(img_in_line.result || link_in_line.result))
        line_image_widget[0].clear();
    // If any of regex matches, it will add image widget
    if (link_in_line.result || img_in_line.result) {
        // Clear the image widgets if exists
        clearLineWidgets(line);
        // Get the file name and alt text depending on format
        var filename = '';
        var alt = '';
        if (link_in_line.result) {
            // linkType 3 and 4
            filename = getFileNameAndAltText(link_in_line.linkType, link_in_line.result).fileName;
            alt = getFileNameAndAltText(link_in_line.linkType, link_in_line.result).altText;
        }
        else if (img_in_line.result) {
            filename = getFileNameAndAltText(img_in_line.linkType, img_in_line.result).fileName;
            alt = getFileNameAndAltText(img_in_line.linkType, img_in_line.result).altText;
        }
        // Create Image
        const img = document.createElement('img');
        // Prepare the src for the Image
        if (link_in_line.result) {
            img.src = filename;
        }
        else {
            // Source Path
            var sourcePath = '';
            if (targetFile != null) {
                sourcePath = targetFile.path;
            }
            else {
                let activeNoteFile = getActiveNoteFile(app.workspace);
                sourcePath = activeNoteFile ? activeNoteFile.path : '';
            }
            var image = app.metadataCache.getFirstLinkpathDest(decodeURIComponent(filename), sourcePath);
            if (image != null)
                img.src = getPathOfImage(app.vault, image);
        }
        // Image Properties
        img.alt = alt;
        // Add Image widget under the Image Markdown
        cm.addLineWidget(line_number, img, { className: 'oz-image-widget' });
    }
};
// Check All Lines Function
const check_lines = (cm, from, to, app) => {
    // Last Used Line Number in Code Mirror
    var file = getFileCmBelongsTo(cm, app.workspace);
    for (let i = from; i <= to; i++) {
        check_line(cm, i, file, app);
    }
};

class OzanImagePlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        // Line Edit Changes
        this.codemirrorLineChanges = (cm, change) => {
            check_lines(cm, change.from.line, change.from.line + change.text.length - 1, this.app);
        };
        // Only Triggered during initial Load
        this.handleInitialLoad = (cm) => {
            var lastLine = cm.lastLine();
            var file = getFileCmBelongsTo(cm, this.app.workspace);
            for (let i = 0; i < lastLine; i++) {
                check_line(cm, i, file, this.app);
            }
        };
    }
    onload() {
        console.log('Image in Editor Plugin is loaded');
        // Register event for each change
        this.registerCodeMirror((cm) => {
            cm.on("change", this.codemirrorLineChanges);
            this.handleInitialLoad(cm);
        });
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off("change", this.codemirrorLineChanges);
            clearWidgets(cm);
        });
        console.log('Image in Editor Plugin is unloaded');
    }
}

module.exports = OzanImagePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
